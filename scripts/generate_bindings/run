#!/usr/bin/env crystal

system(
  String.build do |string|
    string << "docker build "
    string << "-f scripts/generate_bindings/Dockerfile "
    string << "-t generate_bindings "
    string << "."
  end
)
system(
  String.build do |string|
    string << "docker run "
    string << "-u $(id -u) "
    string << "-v $(pwd):/workspace "
    string << "generate_bindings "
    string << "cp src/lib_grok/lib_grok.cr /workspace/src/lib_grok/lib_grok.cr"
  end
)

path = "src/lib_grok/lib_grok.cr"
content = File.read(path)

{
  "ClrspcCmyk"       => "ClrspcCMYK",
  "ClrspcCustomCie"  => "ClrspcCustomCIE",
  "ClrspcDefaultCie" => "ClrspcDefaultCIE",
  "ClrspcEycc"       => "ClrspcEYCC",
  "ClrspcIcc"        => "ClrspcICC",
  "ClrspcSrgb"       => "ClrspcSRGB",
  "ClrspcSycc"       => "ClrspcSYCC",
  "CodecJp2"         => "CodecJP2",
  "FmtBmp"           => "FmtBMP",
  "FmtJp2"           => "FmtJP2",
  "FmtJpg"           => "FmtJPG",
  "FmtPam"           => "FmtPAM",
  "FmtPgx"           => "FmtPGX",
  "FmtPng"           => "FmtPNG",
  "FmtPxm"           => "FmtPXM",
  "FmtRawl"          => "FmtRAWL",
  "FmtRaw"           => "FmtRAW",
  "FmtTif"           => "FmtTIF",
  "Grk"              => "",
  "Io"               => "IO",
  "LibC::Bool"       => "Bool",
  "Uint"             => "UInt",
  "X__"              => "",
  "X_"               => "",
}.each do |before, after|
  content = content.gsub(before, after)
end

[
  "Int32T",
  "UInt16T",
  "UInt32T",
  "UInt64T",
  "UInt8T",
].each do |alias_name|
  content = content.gsub("\n  alias #{alias_name} = #{alias_name}", "")
end

[
  "Asoc",
  "ChannelAssoc",
  "ChannelDefinition",
  "ChannelDescription",
  "ChannelType",
  "CodecFormat",
  "Color",
  "ColorSpace",
  "ComponentMappingComp",
  "Cparameters",
  "DecompressCoreParams",
  "HeaderInfo",
  "Image",
  "ImageComp",
  "ImageMeta",
  "IOBuf",
  "IOInit",
  "Object",
  "PaletteData",
  "PluginBand",
  "PluginCodeBlock",
  "PluginDecompressCallbackInfo",
  "PluginInitInfo",
  "PluginLoadInfo",
  "PluginPass",
  "PluginPrecinct",
  "PluginResolution",
  "PluginTile",
  "Precision",
  "PrecisionMode",
  "ProgOrder",
  "Progression",
  "RateControlAlgorithm",
  "RawCompCparameters",
  "RawCparameters",
  "StreamParams",
  "SupportedFileFmt",
  "TileCacheStrategy",
].each do |type_name|
  content = content.gsub("\n  type #{type_name} = #{type_name}", "")
end

File.write(path, content)
